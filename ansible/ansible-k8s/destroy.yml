---
- hosts: masters
  tasks:
    - name: Detect kubernetes cluster exist
      stat: path="{{ remote_bin_dir }}/kubectl"
      register: st
    - name: Delete all namespaces
      shell: "{{ remote_bin_dir }}/kubectl get ns|awk '/Active/{print $1}'|grep -v default|grep -v kube-system|xargs -i {{ remote_bin_dir }}/kubectl delete ns {}"
      when: st.stat.exists
      run_once: true
      register: output
      changed_when: "'delete' in output.stdout"
      ignore_errors: true
    - name: Drain all nodes
      shell: "{{ remote_bin_dir }}/kubectl drain {{ item }} --ignore-daemonsets"
      register: output
      when: st.stat.exists
      changed_when: "'already cordoned' not in output.stdout"
      with_items: "{{ groups['nodes'] }}"
      ignore_errors: true

- hosts: nodes
  become: true
  tasks:
    - name: Detect service exist
      stat: path=/etc/init/kubelet.conf
      register: st1
    - name: Detect service exist
      stat: path=/etc/systemd/system/kubelet.service
      register: st2
    - name: Disable node services
      service: name={{ item }} enabled=no
      when: st1.stat.exists or st2.stat.exists
      with_items:
        - kubelet
        - kube-proxy
    - name: Stop node services
      service: name={{ item }} state=stopped
      when: st1.stat.exists or st2.stat.exists
      with_items:
        - kubelet
        - kube-proxy


- hosts: masters
  become: true
  tasks:
    - name: Detect service exist
      stat: path=/etc/init/kube-apiserver.conf
      register: st1
    - name: Detect service exist
      stat: path=/etc/systemd/system/kube-apiserver.service
      register: st2
    - name: Disable master services
      service: name={{ item }} enabled=no
      when: st1.stat.exists or st2.stat.exists
      with_items:
        - kubelet
        - kube-apiserver
        - kube-proxy
        - kube-scheduler
        - kube-controller-manager
    - name: Stop master services
      service: name={{ item }} state=stopped
      when: st1.stat.exists or st2.stat.exists
      with_items:
        - kubelet
        - kube-apiserver
        - kube-proxy
        - kube-scheduler
        - kube-controller-manager


- hosts: etcd
  become: true
  tasks:
    - name: Detect service exist
      stat: path=/etc/init/etcd.conf
      register: st1
    - name: Detect service exist
      stat: path=/etc/systemd/system/etcd.service
      register: st2
    - name: Disable services
      service: name=etcd enabled=no
      when: st1.stat.exists or st2.stat.exists
    - name: Stop services
      service: name=etcd state=stopped
      when: st1.stat.exists or st2.stat.exists


- hosts: all
  become: true
  tasks:
    - name: Detect existing k8s containers
      shell: "docker ps -a | awk '/k8s_/{print $1}' | wc -l"
      register: k8s_containers
      changed_when: k8s_containers.rc != 0
    - name: Remove all k8s containers
      shell: "docker ps -a | awk '/k8s_/{print $1}' | xargs -i docker rm -f -v {}"
      when: k8s_containers.stdout != "0"
      register: res
      changed_when: res.rc == 0
    - name: Detect existing k8s volumes
      shell: "df -h | awk '/kubelet/{print $6}' | wc -l"
      register: k8s_volumes
      changed_when: k8s_volumes.rc != 0
    - name: Unmount all k8s volumes
      shell: "df -h | awk '/kubelet/{print $6}' | xargs -i umount {}"
      when: k8s_volumes.stdout != "0"
      register: res
      changed_when: res.rc == 0
    - name: Delete all files
      file: path={{ item }} state=absent
      with_items:
        - /etc/init/etcd.conf
        - /etc/init/kubelet.conf
        - /etc/init/kube-proxy.conf
        - /etc/init/kube-scheduler.conf
        - /etc/init/kube-controller-manager.conf
        - /etc/init/kube-apiserver.conf
        - /etc/systemd/system/etcd.service
        - /etc/systemd/system/kubelet.service
        - /etc/systemd/system/kube-proxy.service
        - /etc/systemd/system/kube-scheduler.service
        - /etc/systemd/system/kube-controller-manager.service
        - /etc/systemd/system/kube-apiserver.service
        - /etc/kubernetes
        - /etc/etcd
        - /etc/cni
        - "{{ remote_bin_dir }}/hyperkube"
        - "{{ remote_bin_dir }}/etcd"
        - "{{ remote_bin_dir }}/etcdctl"
        - "{{ remote_bin_dir }}/kubectl"
        - "{{ remote_bin_dir }}/kubelet"
        - "{{ remote_bin_dir }}/proxy"
        - "{{ remote_bin_dir }}/scheduler"
        - "{{ remote_bin_dir }}/apiserver"
        - "{{ remote_bin_dir }}/controller-manager"
        - "{{ remote_bin_dir }}/federation-apiserver"
        - "{{ remote_bin_dir }}/federation-controller-manager"
        - "{{ remote_bin_dir }}/cert-generator.sh"
        - "{{ remote_bin_dir }}/docker-load.sh"
        - "{{ remote_image_dir }}"
        - /usr/local/bin/nsenter
        - /opt/cni
        - /var/log/kubernetes
        - /var/lib/kubelet
        - /var/log/etcd
        - /var/lib/etcd
        - /var/run/kubernetes
        - /var/run/calico
