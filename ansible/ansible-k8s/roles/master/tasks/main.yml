---
- name: Make sure remote_bin_dir exist
  file: path="{{ remote_bin_dir }}" state=directory mode=0755 recurse=yes

- name: Make sure kubernetes directories exist
  file: path="{{ item }}" state=directory mode=0755
  with_items:
    - /opt/cni
    - /opt/cni/bin
    - /etc/kubernetes
    - /etc/kubernetes/manifests
    - /etc/kubernetes/addons
    - /etc/cni
    - /etc/cni/net.d

- name: Create kube user
  user: name=kube state=present shell=/sbin/nologin home=/var/lib/kubelet

- name: Make sure /etc/kubernetes/certs directory exist
  file: path=/etc/kubernetes/certs state=directory owner=root group=root mode=0700

- name: Copy nsenter for ubuntu-14.04
  copy:
    src="{{ bin_dir }}/nsenter"
    dest="/usr/local/bin/nsenter"
    mode=0755
  when: ansible_distribution == 'Ubuntu'

- name: Get kubernetes from internet
  get_url:
    url="https://storage.googleapis.com/kubernetes-release/release/v{{ kube_version }}/bin/linux/amd64/hyperkube"
    dest="{{ remote_bin_dir }}/hyperkube"
    mode=0755
  when: net_install

- name: Get kubernetes from localhost
  copy:
    src="{{ bin_dir }}/hyperkube"
    dest="{{ remote_bin_dir }}/hyperkube"
    mode=0755
  when: not net_install

- name: Check kubectl exist
  stat: path="{{ remote_bin_dir }}/kubectl"
  register: sym

- name: Install kubernetes from hyperkube
  shell: "{{ remote_bin_dir }}/hyperkube --make-symlinks"
  args:
    chdir: "{{ remote_bin_dir }}"
  when: sym.stat.islnk is not defined

- name: Set fact of IP
  set_fact:
    node_ip: "{% if public_iface is defined %}{{ hostvars[inventory_hostname]['ansible_'+public_iface]['ipv4']['address'] }}{% else %}{{ ansible_default_ipv4['address'] }}{% endif %}"

- name: Install docker image load helper script
  copy: src=docker-load.sh dest="{{ remote_bin_dir }}/docker-load.sh" mode=0755

- name: Install certificates generator scripts
  template:
    src=cert-generator.sh.j2
    dest="{{ remote_bin_dir }}/cert-generator.sh"
    mode=0755

- name: Generate admin and apiserver certificates
  shell: "{{ remote_bin_dir }}/cert-generator.sh admin apiserver"
  register: output
  changed_when: "'created' in output.stdout"

- name: Generate master certificates
  shell: "{{ remote_bin_dir }}/cert-generator.sh {{ node_ip }} {{ ansible_hostname }}"
  register: output
  changed_when: "'created' in output.stdout"

- name: Symlink certificates
  file:
    src="/etc/kubernetes/certs/{{ node_ip }}.{{ item }}"
    dest="/etc/kubernetes/certs/kubelet.{{ item }}"
    state=link
    force=yes
    mode=0600
  with_items:
    - key
    - crt

- include: load-docker.yml
  when: not net_install

- include: configure.yml
  tags:
    - configure

- include: start.yml
  when: kube_modified == true

- include: restart.yml
  when: kube_modified == true and kube_started.changed == false
  tags:
    - restart

- name: Install kube-addon-manager
  template:
    src=addon-manager.json.j2
    dest=/etc/kubernetes/manifests/addon-manager.json
    mode=0644

- name: Install calico network
  template:
    src=calico.yaml.j2
    dest=/etc/kubernetes/addons/calico.yaml
    mode=0644
