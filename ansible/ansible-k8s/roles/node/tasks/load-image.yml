---
- name: Ensure image dir exist
  file: path={{ remote_image_dir }} state=directory mode=0755

- name: Set gcr fact for alias
  set_fact:
    gcr: gcr.io/google_containers

- name: Copy docker images to node
  copy:
    src="{{ image_dir }}/{{ item }}.tar"
    dest="{{ remote_image_dir }}/{{ item }}.tar"
  with_items:
    - pause-amd64_{{ pause_version }}
    - exechealthz-amd64_{{ exechealthz_version }}
    - calico-cni_v{{ calico_cni_version }}
    - calico-ctl_v{{ calico_ctl_version }}
    - calico-node_v{{ calico_node_version }}

    - kubedns-amd64_{{ kubedns_version }}
    - kube-dnsmasq-amd64_{{ kube_dnsmasq_version }}
    - dnsmasq-metrics-amd64_{{ dnsmasq_metrics_version }}

- name: Load docker images for node
  shell: "{{ remote_bin_dir }}/docker-load.sh {{ remote_image_dir }}/{{ item.tar }}.tar {{ item.img}}"
  register: output
  changed_when: "'not exist' in output.stdout"
  with_items:
    - { tar: 'pause-amd64_{{ pause_version }}', img: '{{ gcr }}/pause-amd64:{{ pause_version }}' }
    - { tar: 'exechealthz-amd64_{{ exechealthz_version }}', img: '{{ gcr }}/exechealthz-amd64:{{ exechealthz_version }}' }
    - { tar: 'calico-cni_v{{ calico_cni_version }}', img: 'calico/cni:v{{ calico_cni_version }}' }
    - { tar: 'calico-ctl_v{{ calico_ctl_version }}', img: 'calico/ctl:v{{ calico_ctl_version }}' }
    - { tar: 'calico-node_v{{ calico_node_version }}', img: 'quay.io/calico/node:v{{ calico_node_version }}'}

    - { tar: 'kubedns-amd64_{{ kubedns_version }}', img: '{{ gcr }}/kubedns-amd64:{{ kubedns_version }}'}
    - { tar: 'kube-dnsmasq-amd64_{{ kube_dnsmasq_version }}', img: '{{ gcr }}/kube-dnsmasq-amd64:{{ kube_dnsmasq_version }}'}
    - { tar: 'dnsmasq-metrics-amd64_{{ dnsmasq_metrics_version }}', img: '{{ gcr }}/dnsmasq-metrics-amd64:{{ dnsmasq_metrics_version }}' }

- name: Copy kube-policy-controller image
  copy:
    src="{{ image_dir }}/kube-policy-controller_v{{ kube_policy_controller_version }}.tar"
    dest="{{ remote_image_dir }}/kube-policy-controller_v{{ kube_policy_controller_version }}.tar"
  when: kube_network_policy

- name: Load kube-policy-controller image
  shell: "{{ remote_bin_dir }}/docker-load.sh {{ remote_image_dir }}/kube-policy-controller_v{{ kube_policy_controller_version }}.tar calico/kube-policy-controller:v{{ kube_policy_controller_version }}"
  register: output
  changed_when: "'not exist' in output.stdout"
  when: kube_network_policy

- name: Copy kubernetes dashboard images
  copy:
    src="{{ image_dir }}/kubernetes-dashboard-amd64_v{{ kubernetes_dashboard_version }}.tar"
    dest="{{ remote_image_dir }}/kubernetes-dashboard-amd64_v{{ kubernetes_dashboard_version }}.tar"
  when: kube_ui

- name: Load kubernetes dashboard images
  shell: "{{ remote_bin_dir }}/docker-load.sh {{ remote_image_dir }}/kubernetes-dashboard-amd64_v{{ kubernetes_dashboard_version }}.tar {{ gcr }}/kubernetes-dashboard-amd64:v{{ kubernetes_dashboard_version }}"
  register: output
  changed_when: "'not exist' in output.stdout"
  when: kube_ui

- name: Copy logging images
  copy:
    src="{{ image_dir }}/{{ item }}.tar"
    dest="{{ remote_image_dir }}/{{ item }}.tar"
  with_items:
    - elasticsearch_v{{ elasticsearch_version }}
    - fluentd_-elasticsearch_{{ fluentd_elasticsearch_version }}
    - kibana_{{ kibana_version }}
  when: cluster_logging

- name: Load logging images
  shell: "{{ remote_bin_dir }}/docker-load.sh {{ remote_image_dir }}/{{ item.tar }}.tar {{ item.img}}"
  register: output
  changed_when: "'not exist' in output.stdout"
  with_items:
    - { tar: 'elasticsearch_v{{ elasticsearch_version }}', img: '{{ gcr }}/elasticsearch:v{{ elasticsearch_version }}' }
    - { tar: 'kibana_v{ kibana_version }', img: '{{ gcr }}/kibana:v{{ kibana_version }}'}
    - { tar: 'fluentd-elasticsearch_{{ fluentd_elasticsearch_version }}', img: '{{ gcr }}/fluentd-elasticsearch:{{ fluentd_elasticsearch_version }}'}
  when: cluster_logging

- name: Copy monitoring images
  copy:
    src="{{ image_dir }}/{{ item }}.tar"
    dest="{{ remote_image_dir }}/{{ item }}.tar"
  with_items:
    - prometheus_v{{ prometheus_version }}
    - node-exporter_v{{ node_exporter_version }}
    - grafana_{{ grafana_version }}
  when: cluster_monitoring

- name: Load monitoring images
  shell: "{{ remote_bin_dir }}/docker-load.sh {{ remote_image_dir }}/{{ item.tar }}.tar {{ item.img }}"
  register: output
  changed_when: "'not exist' in output.stdout"
  with_items:
    - { tar: 'node-exporter_v{{ node_exporter_version }}', img: 'prom/node-exporter:v{{ node_exporter_version }}' }
    - { tar: 'prometheus_v{{ prometheus_version }}', img: 'prom/prometheus:v{{ prometheus_version }}'}
    - { tar: 'grafana_{{ grafana_version }}', img: 'grafana/grafana:{{ grafana_version }}' }
  when: cluster_monitoring
